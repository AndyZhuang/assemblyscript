/** AssemblyScript version. */
export const version: string = "0.0.1";

/** Library sources for in-browser usage. */
export const files: { [key: string]: string } = {
  "assembly.d.ts": "// TypeScript definition file for AssemblyScript compilation.\n// see: https://github.com/dcodeIO/AssemblyScript for details\n\n// Core types\n\n/** An 8-bit signed integer. */\ndeclare type sbyte = number;\n/** An 8-bit unsigned integer. */\ndeclare type byte = number;\n/** A 16-bit signed integer. */\ndeclare type short = number;\n/** A 16-bit unsigned integer. */\ndeclare type ushort = number;\n/** A 32-bit signed integer. */\ndeclare type int = number;\n/** A 32-bit unsigned integer. */\ndeclare type uint = number;\n/** A 64-bit signed integer. */\ndeclare type long = number;\n/** A 64-bit unsigned integer. */\ndeclare type ulong = number;\n/** A 1-bit unsigned integer. */\ndeclare type bool = number;\n/** A 32-bit float. */\ndeclare type float = number;\n/** A 64-bit float. */\ndeclare type double = number;\n/** A 32-bit unsigned integer when targeting WASM32 respectively a 64-bit unsigned integer when targeting WASM64. */\ndeclare type uintptr = number;\n\n// Core type aliases\n\n/** An 8-bit signed integer. */\ndeclare type int8 = sbyte;\n/** An 8-bit unsigned integer. */\ndeclare type uint8 = byte;\n/** A 16-bit signed integer. */\ndeclare type int16 = short;\n/** A 16-bit unsigned integer. */\ndeclare type uint16 = ushort;\n/** A 32-bit signed integer. */\ndeclare type int32 = int;\n/** A 32-bit signed integer. */\ndeclare type uint32 = uint;\n/** A 64-bit signed integer. */\ndeclare type int64 = long;\n/** A 64-bit unsigned integer. */\ndeclare type uint64 = ulong;\n/** A 32-bit float. */\ndeclare type float32 = float;\n/** A 64-bit float. */\ndeclare type float64 = double;\n\n/** NaN (not a number) as a 64-bit float. */\ndeclare const NaN: double;\n/** NaN (not a number) as a 32-bit float. */\ndeclare const NaNf: float;\n/** Positive infinity as a 64-bit float. */\ndeclare const Infinity: double;\n/** Positive infinity as a 32-bit float. */\ndeclare const Infinityf: float;\n\n// Arrays\n\n/** A fixed-size array. */\ndeclare class Array<T> implements IDisposable {\n  readonly length: uintptr;\n  constructor(size: uintptr);\n  dispose(): void;\n}\n\n/** A fixed-size 8-bit signed integer array. */\ndeclare class Int8Array extends Array<sbyte> {}\n/** A fixed-size 8-bit unsigned integer array. */\ndeclare class Uint8Array extends Array<byte> {}\n/** A fixed-size 16-bit signed integer array. */\ndeclare class Int16Array extends Array<short> {}\n/** A fixed-size 16-bit unsigned integer array. */\ndeclare class Uint16Array extends Array<ushort> {}\n/** A fixed-size 32-bit signed integer array. */\ndeclare class Int32Array extends Array<int> {}\n/** A fixed-size 32-bit unsigned integer array. */\ndeclare class Uint32Array extends Array<uint> {}\n/** A fixed-size 64-bit signed integer array. */\ndeclare class Int64Array extends Array<long> {}\n/** A fixed-size 64-bit unsigned integer array. */\ndeclare class Uint64Array extends Array<ulong> {}\n/** A fixed-size 32-bit float array. */\ndeclare class Float32Array extends Array<float> {}\n/** A fixed-size 64-bit float array. */\ndeclare class Float64Array extends Array<double> {}\n/** A fixed-size 8-bit unsigned integer array. */\ndeclare class Buffer extends Uint8Array {}\n\n// Strings\n\n/** A fixed-size utf16-le encoded string. */\ndeclare class String extends Array<ushort> implements IDisposable {\n  readonly length: uintptr;\n  constructor(size: uintptr);\n  dispose(): void;\n}\n\n// Builtins\n\n/** Performs the sign-agnostic rotate left operation on a 32-bit integer. */\ndeclare function rotl(value: int, shift: int): int;\n/** Performs the sign-agnostic rotate left operation on a 64-bit integer. */\ndeclare function rotll(value: long, shift: long): long;\n/** Performs the sign-agnostic rotate right operation on a 32-bit integer. */\ndeclare function rotr(value: int, shift: int): int;\n/** Performs the sign-agnostic rotate right operation on a 64-bit integer. */\ndeclare function rotrl(value: long, shift: long): long;\n/** Performs the sign-agnostic count leading zero bits operation on a 32-bit integer. All zero bits are considered leading if the value is zero. */\ndeclare function clz(value: int): int;\n/** Performs the sign-agnostic count leading zero bits operation on a 64-bit integer. All zero bits are considered leading if the value is zero. */\ndeclare function clzl(value: long): long;\n/** Performs the sign-agnostic count trailing zero bits operation on a 32-bit integer. All zero bits are considered trailing if the value is zero. */\ndeclare function ctz(value: int): int;\n/** Performs the sign-agnostic count trailing zero bits operation on a 64-bit integer. All zero bits are considered trailing if the value is zero. */\ndeclare function ctzl(value: long): long;\n/** Performs the sign-agnostic count number of one bits operation on a 32-bit integer. */\ndeclare function popcnt(value: int): int;\n/** Performs the sign-agnostic count number of one bits operation on a 64-bit integer. */\ndeclare function popcntl(value: long): long;\n/** Computes the absolute value of a 64-bit float. */\ndeclare function abs(value: double): double;\n/** Computes the absolute value of a 32-bit float. */\ndeclare function absf(value: float): float;\n/** Performs the ceiling operatoion on a 64-bit float. */\ndeclare function ceil(value: double): double;\n/** Performs the ceiling operation on a 32-bit float. */\ndeclare function ceilf(value: float): float;\n/** Performs the floor operation on a 64-bit float. */\ndeclare function floor(value: double): double;\n/** Performs the floor operation on a 32-bit float. */\ndeclare function floorf(value: float): float;\n/** Calculates the square root of a 64-bit float. */\ndeclare function sqrt(value: double): double;\n/** Calculates the square root of a 32-bit float. */\ndeclare function sqrtf(value: float): float;\n/** Rounds to nearest integer towards zero of a 64-bit float. */\ndeclare function trunc(value: double): double;\n/** Rounds to nearest integer towards zero of a 32-bit float. */\ndeclare function truncf(value: float): float;\n/** Rounds to nearest integer tied to even of a 64-bit float. */\ndeclare function nearest(value: double): double;\n/** Rounds to nearest integer tied to even of a 32-bit float. */\ndeclare function nearestf(value: float): float;\n/** Determines the minimum of two 64-bit floats. If either operand is NaN, returns NaN. */\ndeclare function min(left: double, right: double): double;\n/** Determines the minimum of two 32-bit floats. If either operand is NaN, returns NaN. */\ndeclare function minf(left: float, right: float): float;\n/** Determines the maximum of two 64-bit floats. If either operand is NaN, returns NaN. */\ndeclare function max(left: double, right: double): double;\n/** Determines the maximum of two 32-bit floats. If either operand is NaN, returns NaN. */\ndeclare function maxf(left: float, right: float): float;\n/** Composes a 64-bit float from the magnitude of `x` and the sign of `y`. */\ndeclare function copysign(x: double, y: double): double;\n/** Composes a 32-bit float from the magnitude of `x` and the sign of `y`. */\ndeclare function copysignf(x: float, y: float): float;\n/** Reinterprets the bits of a 32-bit float as a 32-bit integer. */\ndeclare function reinterpreti(value: float): int;\n/** Reinterprets the bits of a 64-bit float as a 64-bit integer. */\ndeclare function reinterpretl(value: double): long;\n/** Reinterprets the bits of a 32-bit integer as a 32-bit float. */\ndeclare function reinterpretf(value: int): float;\n/** Reinterprets the bits of a 64-bit integer as a 64-bit double. */\ndeclare function reinterpretd(value: long): double;\n/** Returns the current memory size in units of pages. One page is 64kb. */\ndeclare function current_memory(): int;\n/** Grows linear memory by a given unsigned delta of pages. One page is 64kb. Returns the previous memory size in units of pages or `-1` on failure. */\ndeclare function grow_memory(value: uint): int;\n/** Returns the byte size of the specified core or class type. Compiles to a constant. */\ndeclare function sizeof<T>(): uintptr;\n\n// tbd.\n/** UNSAFE - Casts a class to a pointer. */\n// declare function __deref<T>(value: T): uintptr;\n/** UNSAFE - Casts a pointer to a class. */\n// declare function __ref<T>(ptr: uintptr): T;\n\n// Standard library\n\n/** Sets a chunk of memory to the provided value `c`. Usually used to reset it to all `0`s. */\ndeclare function memset(dest: uintptr, c: int, size: uintptr): uintptr;\n/** Copies data from one chunk of memory to another. */\ndeclare function memcpy(dest: uintptr, src: uintptr, size: uintptr): uintptr;\n/** Compares a chunk of memory to another. Returns `0` if both are equal, otherwise the difference `vl[i] - vr[i]` of the first differing byte values. */\ndeclare function memcmp(left: uintptr, right: uintptr, size: uintptr): int;\n/** Allocates a chunk of memory of the specified size and returns a pointer to it. */\ndeclare function malloc(size: uintptr): uintptr;\n/** Frees a previously allocated chunk of memory by its pointer. */\ndeclare function free(ptr: uintptr): void;\n\n// Temporary fillers\n\ndeclare abstract class Boolean {}\ndeclare abstract class Function {}\ndeclare abstract class IArguments {}\ndeclare abstract class Number {}\ndeclare abstract class Object {}\ndeclare abstract class RegExp {}\n\n// Interfaces\n\ndeclare interface IDisposable {\n  dispose(): void;\n}\n",
  "std/array.ts": "class ArrayImpl<T> {\n}\n",
  "std/string.ts": "class StringImpl extends Array<ushort> {\n}\n"
};

/** Precompiled malloc.wasm as a base64-encoded string. */
export const malloc: string = "";
